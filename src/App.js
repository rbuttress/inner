import React, { Suspense, useDeferredValue } from 'react';
import { Canvas } from '@react-three/fiber';
import { useGLTF, OrbitControls, ContactShadows, PresentationControls } from '@react-three/drei';
import { FaDownload } from 'react-icons/fa'; // Import the download icon from react-icons

import tunnel from 'tunnel-rat';

const status = tunnel();

const MODELS = {
  FULL: {
    lable: 'FULL',
    title: 'CNC Conveyorbelt Tangential Knife',
    accessibility: 'None',
    description: 'Full is a computer controlled fabric cutter designed to enable a small scale garment workshop to rapidly produce garments. Its usecases are limited to where small batch production is desired over negotiating for minimums with larger manufactures. This makes the production of a greater number of variants possible. Thus it is the aim of this project to generate the variant products needed to achieve full inclusivity. This page is the glossary of accessible and inclusive garments generated by FULL. All patterns are opensource and will be developed as theyre requested.',
    glbFileLocation: '/models/full.glb',
    pdfFileLocation: '/documents/full.pdf',
  },
  Narrow: {
    lable: 'Narrow',
    title: 'Narrow Liner Thong',
    size: 'S',
    type: 'Thong',
    color: 'Black',
    fabric: 'Mesh, Cotton',
    configuration: 'Narrow Liner',
    accessibility: 'None',
    description: 'Wicking cotton jersey liner 5cm wide. Black mesh, fold over elastic',
    glbFileLocation: '/models/narrow.glb',
    pdfFileLocation: '/documents/narrow.pdf',
  },
  Wide: {
    lable: 'Wide',
    title: 'Wide Liner Thong',
    size: 'M',
    type: 'Thong',
    color: 'Black',
    fabric: 'Mesh, Cotton',
    configuration: 'Wide Liner',
    accessibility: 'None',
    description: 'Wicking cotton jersey liner 9cm wide. Black mesh, fold over elastic',
    glbFileLocation: '/models/wide.glb',
    pdfFileLocation: '/documents/wide.pdf',
  },
  // Add more models with title, description, and file locations
};

export default function App() {

  const handleModelChange = ( modelName ) => {
    setSelectedModel( modelName );
  };

  const [selectedModel, setSelectedModel] = React.useState( 'FULL' );

  return (
    <div style={ { position: 'relative', width: '100vw', height: '100vh' } }>\


      <header className="p-20 absolute top-0 left-0 z-10">
        <h1 className="text-2xl font-bold">{ MODELS[selectedModel].title }</h1>
        { MODELS[selectedModel].size && <p className="text-md">Size: { MODELS[selectedModel].size }</p> }
        { MODELS[selectedModel].color && <p className="text-md">Color: { MODELS[selectedModel].color }</p> }
        { MODELS[selectedModel].fabric && <p className="text-md">Fabric: { MODELS[selectedModel].fabric }</p> }
        <p>-</p>
        <p className="text-sm">{ MODELS[selectedModel].description }</p>
        <status.Out />
      </header>




      <nav className="fixed top-0 left-0 w-full bg-gray-100 overflow-x-auto z-10">
        <div className="flex px-4 py-2">
          { Object.keys( MODELS ).map( ( modelName ) => (
            <button
              key={ modelName }
              onClick={ () => handleModelChange( modelName ) }
              className={ `flex px-4 py-2 font-semibold text-gray-600 ${selectedModel === modelName ? 'bg-gray-300' : ''
                }` }
            >
              { MODELS[modelName].lable }
            </button>
          ) ) }
        </div>
      </nav>

      <div className="fixed bottom-0 left-0 w-full z-20 flex justify-center pb-4">
        <div className="flex space-x-4">
          <button
            onClick={ () => window.location.href = MODELS[selectedModel].glbFileLocation }
            className="px-4 py-4 font-semibold text-grey-500 bg-white-500 rounded hover:text-green-600 focus:outline-none focus:ring focus:ring-green-300"
          >
            <div className='flex'><FaDownload className="mr-2" /> .GLB </div>
          </button>
          <button
            onClick={ () => window.location.href = MODELS[selectedModel].pdfFileLocation }
            className="px-4 py-4 font-semibold text-grey-500 bg-white-500 rounded hover:text-green-600 focus:outline-none focus:ring focus:ring-green-300"
          >
            <div className='flex'><FaDownload className="mr-2" /> .PDF </div>
          </button>
        </div>
      </div>

      <Canvas camera={ { position: [0, -10, 40], fov: 50, look: [0, -300, 0] } }>
        <hemisphereLight color="white" groundColor="blue" intensity={ 0.1 } />
        <spotLight position={ [50, 50, 10] } angle={ 0.15 } penumbra={ 1 } />

        <group position={ [0, -10, 0] }>
          <Suspense fallback={ <status.In>Loading ...</status.In> }>
            <PresentationControls
              global
              config={ { mass: 2, tension: 50 } }
              snap={ { mass: 2, tension: 50 } }
              rotation={ [.3, 0, 0] }
              polar={ [-Math.PI / 3, Math.PI / 3] }
              azimuth={ [-Math.PI / 1.4, Math.PI / 2] }>
              { selectedModel === 'FULL' ? (
                <>
                  <Model scale={ 4 } position={ [0, 0, 0] } url="/models/Electrical.gltf" />
                  <Model scale={ 4 } position={ [0, 0, 0] } url="/models/YAXIS.gltf" />
                  <Model scale={ 4 } position={ [0, 0, 0] } url="/models/XAXIS.gltf" />
                  <Model scale={ 4 } position={ [0, 0, 0] } url="/models/ZAAXIS.gltf" />
                </>
              ) : (
                <Model scale={ 50 } position={ [0, -40, 0] } url={ MODELS[selectedModel].glbFileLocation } />
              ) }
            </PresentationControls>
          </Suspense>
          <ContactShadows scale={ 50 } blur={ 2 } far={ 80 } />
        </group>

        <OrbitControls azimuth={ [Math.PI / 2, Math.PI / 2] } enablePan={ false } />
      </Canvas>
    </div>
  );
}

function Model( { url, ...props } ) {
  const deferred = useDeferredValue( url );
  const { scene } = useGLTF( deferred );
  return <primitive object={ scene } { ...props } />;
}
